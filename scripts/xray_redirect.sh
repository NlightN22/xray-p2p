#!/bin/sh

set -eu

DEFAULT_PORT="48044"
DEFAULT_ZONE="lan"
LAN_SECTION="xray_transparent_lan"
INCLUDE_SECTION="xray_transparent_local"
NFT_INCLUDE_PATH="/etc/nftables.d/xray-transparent.nft"

log() {
    printf '%s\n' "$*"
}

die() {
    printf 'Error: %s\n' "$*" >&2
    exit 1
}

usage() {
    cat <<'USAGE'
Usage: xray_redirect.sh [SUBNET] [PORT] [ZONE]

SUBNET  Destination subnet to divert (CIDR notation, e.g. 10.0.101.0/24).
PORT    Local XRAY dokodemo-door port to forward to (default 48044).
ZONE    OpenWrt firewall zone whose traffic should be intercepted (default lan).

The script ensures two firewall adjustments:
  * Redirect traffic from the specified zone towards SUBNET into the local XRAY port.
  * Inject an nftables output-chain rule so router-originated traffic to SUBNET is
    redirected as well.

Existing sections named 'xray_transparent_lan' and 'xray_transparent_local' are
updated in-place; the nftables include is rewritten on each run.
USAGE
}

if [ "${1:-}" = "-h" ] || [ "${1:-}" = "--help" ]; then
    usage
    exit 0
fi

SUBNET="${1:-}"
PORT="${2:-$DEFAULT_PORT}"
ZONE="${3:-$DEFAULT_ZONE}"

if [ -z "$SUBNET" ]; then
    if [ -t 0 ]; then
        printf 'Enter destination subnet (CIDR, e.g. 10.0.101.0/24): '
        IFS= read -r SUBNET
    elif [ -r /dev/tty ]; then
        printf 'Enter destination subnet (CIDR, e.g. 10.0.101.0/24): '
        IFS= read -r SUBNET </dev/tty
    else
        die "Subnet argument is required"
    fi
fi

if [ -z "$SUBNET" ]; then
    die "Subnet cannot be empty"
fi

case "$SUBNET" in
    *'/'*) ;;
    *) die "Subnet must be in CIDR notation (example: 10.0.101.0/24)" ;;
esac

case "$PORT" in
    ''|*[!0-9]*) die "Port must be numeric" ;;
    *)
        if [ "$PORT" -lt 1 ] || [ "$PORT" -gt 65535 ]; then
            die "Port must be between 1 and 65535"
        fi
        ;;
esac

if ! command -v uci >/dev/null 2>&1; then
    die "uci command not available (is this OpenWrt?)"
fi

log "Configuring transparent proxy for subnet $SUBNET (zone: $ZONE, port: $PORT)"

ensure_section() {
    local section="$1"
    local type="$2"
    if uci -q get "firewall.$section" >/dev/null 2>&1; then
        uci set "firewall.$section=$type"
    else
        local newsec
        if ! newsec=$(uci add firewall "$type"); then
            die "Failed to add firewall section of type '$type'"
        fi
        uci rename "firewall.$newsec=$section"
    fi
}

ensure_redirect_lan() {
    ensure_section "$LAN_SECTION" redirect

    # remove optional matches that could interfere with full redirect
    uci -q delete "firewall.$LAN_SECTION.src_ip"
    uci -q delete "firewall.$LAN_SECTION.src_port"
    uci -q delete "firewall.$LAN_SECTION.dest"
    uci -q delete "firewall.$LAN_SECTION.dest_port_start"
    uci -q delete "firewall.$LAN_SECTION.dest_port_end"

    uci set "firewall.$LAN_SECTION.name=XRAY transparent proxy (LAN)"
    uci set "firewall.$LAN_SECTION.enabled=1"
    uci set "firewall.$LAN_SECTION.family=ipv4"
    uci set "firewall.$LAN_SECTION.src=$ZONE"
    uci set "firewall.$LAN_SECTION.proto=tcp"
    uci set "firewall.$LAN_SECTION.target=redirect"
    uci set "firewall.$LAN_SECTION.dest_port=$PORT"
    uci set "firewall.$LAN_SECTION.src_dip=$SUBNET"
}

ensure_include_section() {
    ensure_section "$INCLUDE_SECTION" include
    uci set "firewall.$INCLUDE_SECTION.type=nftables"
    uci set "firewall.$INCLUDE_SECTION.path=$NFT_INCLUDE_PATH"
    uci set "firewall.$INCLUDE_SECTION.position=table-append"
    uci set "firewall.$INCLUDE_SECTION.fw4_compatible=1"
}

write_nft_include() {
    local dir
    dir=$(dirname "$NFT_INCLUDE_PATH")
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
    fi

    local tmp
    tmp=$(mktemp)
    cat <<EOF_NFT > "$tmp"
# Autogenerated by xray_redirect.sh - do not edit manually.
# Redirect router-originated TCP traffic to $SUBNET into local port $PORT.
chain xray_transparent_output {
    type nat hook output priority dstnat + 5; policy accept;
    ip daddr $SUBNET tcp redirect to :$PORT
}
EOF_NFT
    chmod 0644 "$tmp"
    mv "$tmp" "$NFT_INCLUDE_PATH"
}

ensure_redirect_lan
ensure_include_section
write_nft_include

uci commit firewall

if command -v fw4 >/dev/null 2>&1; then
    log "Reloading firewall via fw4"
    if ! fw4 reload; then
        die "fw4 reload failed"
    fi
else
    log "Reloading firewall service"
    if ! /etc/init.d/firewall reload; then
        die "Firewall reload failed"
    fi
fi

log "Firewall updated. TCP traffic for $SUBNET redirects to local port $PORT"
log "Zone handled: $ZONE"
log "Include file: $NFT_INCLUDE_PATH"
