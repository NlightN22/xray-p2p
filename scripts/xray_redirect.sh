#!/bin/sh

set -eu

NFT_SNIPPET="/etc/nftables.d/xray-transparent.nft"
XRAY_INBOUND_FILE="/etc/xray/inbounds.json"

log() {
    printf '%s\n' "$*"
}

die() {
    printf 'Error: %s\n' "$*" >&2
    exit 1
}

require_cmd() {
    cmd="$1"
    if command -v "$cmd" >/dev/null 2>&1; then
        return
    fi

    case "$cmd" in
        nft)
            die "Required command 'nft' not found. Install nftables (e.g. opkg update && opkg install nftables)."
            ;;
        *)
            die "Required command '$cmd' not found. Install it before running this script."
            ;;
    esac
}

usage() {
    cat <<'USAGE'
Usage: xray_redirect.sh [SUBNET]

SUBNET  Destination subnet to divert (CIDR notation, e.g. 10.0.101.0/24).

If SUBNET is omitted, the script prompts for it interactively.
The script reads dokodemo-door inbound(s) from /etc/xray/inbounds.json and
installs nftables rules that redirect matching traffic to the selected port.
USAGE
}

if [ "${1:-}" = "-h" ] || [ "${1:-}" = "--help" ]; then
    usage
    exit 0
fi

if [ "$#" -gt 1 ]; then
    usage
    exit 1
fi

SUBNET="${1:-}"

if [ -z "$SUBNET" ]; then
    if [ -t 0 ]; then
        printf 'Enter destination subnet (CIDR, e.g. 10.0.101.0/24): '
        IFS= read -r SUBNET
    elif [ -r /dev/tty ]; then
        printf 'Enter destination subnet (CIDR, e.g. 10.0.101.0/24): '
        IFS= read -r SUBNET </dev/tty
    else
        die "Subnet argument is required"
    fi
fi

if [ -z "$SUBNET" ]; then
    die "Subnet cannot be empty"
fi

case "$SUBNET" in
    */*) ;;
    *) die "Subnet must be in CIDR notation (example: 10.0.101.0/24)" ;;
esac

if [ ! -f "$XRAY_INBOUND_FILE" ]; then
    die "XRAY inbound file $XRAY_INBOUND_FILE not found"
fi

require_cmd nft

select_dokodemo_port() {
    if command -v jq >/dev/null 2>&1; then
        jq -r '.inbounds[] | select(.protocol == "dokodemo-door") | .port' "$XRAY_INBOUND_FILE" 2>/dev/null | grep -E '^[0-9]+$'
        return
    fi

    if command -v jsonfilter >/dev/null 2>&1; then
        jsonfilter -i "$XRAY_INBOUND_FILE" -e '@.inbounds[@.protocol="dokodemo-door"].port' 2>/dev/null | grep -E '^[0-9]+$'
        return
    fi

    awk '
        BEGIN { port=""; want_port=0 }
        /\{/ { port=""; want_port=0 }
        /"port"[[:space:]]*:/ {
            match($0, /[0-9]+/, m)
            port=m[0]
            if (want_port) {
                print port
                want_port=0
            }
        }
        /"protocol"[[:space:]]*:[[:space:]]*"dokodemo-door"/ {
            if (port != "")
                print port
            else
                want_port=1
        }
        /\}/ { port=""; want_port=0 }
    ' "$XRAY_INBOUND_FILE"
}

ports=$(select_dokodemo_port || true)
if [ -z "$ports" ]; then
    die "No dokodemo-door inbounds found in $XRAY_INBOUND_FILE"
fi

count=$(printf '%s\n' "$ports" | wc -l)
if [ "$count" -eq 1 ]; then
    PORT="$ports"
else
    log "Multiple dokodemo-door ports detected:"
    idx=1
    printf '%s\n' "$ports" | while IFS= read -r port; do
        printf ' [%d] %s\n' "$idx" "$port"
        idx=$((idx + 1))
    done
    if [ -t 0 ]; then
        printf 'Select port number: '
        read -r answer
    elif [ -r /dev/tty ]; then
        printf 'Select port number: '
        read -r answer </dev/tty
    else
        die "Multiple dokodemo-door ports found but no interactive input available"
    fi

    case "$answer" in
        *[!0-9]*) die "Invalid selection" ;;
    esac
    if [ "$answer" -lt 1 ] || [ "$answer" -gt "$count" ]; then
        die "Selection out of range"
    fi
    PORT=$(printf '%s\n' "$ports" | sed -n "${answer}p")
fi

log "Configuring transparent redirect via nftables: subnet=$SUBNET port=$PORT"

write_nft_snippet() {
    local dir tmp rule_subnet rule_port
    dir=$(dirname "$NFT_SNIPPET")
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
    fi

    rule_subnet=$(printf '%s' "$SUBNET" | sed 's/\//\\\//g')
    rule_port="$PORT"

    tmp=$(mktemp)
    cat <<'NFT' > "$tmp"
# Autogenerated by xray_redirect.sh - do not edit manually.
chain xray_transparent_prerouting {
    type nat hook prerouting priority dstnat + 5; policy accept;
    meta l4proto tcp tcp dport != __PORT__ ip daddr __SUBNET__ counter redirect to :__PORT__
}

chain xray_transparent_output {
    type nat hook output priority dstnat + 5; policy accept;
    meta l4proto tcp tcp dport != __PORT__ ip daddr __SUBNET__ counter redirect to :__PORT__
}
NFT
    sed -i "s/__PORT__/$rule_port/g" "$tmp"
    sed -i "s/__SUBNET__/$rule_subnet/g" "$tmp"
    chmod 0644 "$tmp"
    mv "$tmp" "$NFT_SNIPPET"
}

write_nft_snippet

if command -v fw4 >/dev/null 2>&1; then
    if fw4 reload >/dev/null; then
        log "fw4 reload ok"
    else
        log "fw4 reload failed; falling back to direct nft"
        if ! nft -f "$NFT_SNIPPET"; then
            die "Failed to load nft rules"
        fi
    fi
else
    log "fw4 binary not found; applying nft snippet directly"
    if ! nft -f "$NFT_SNIPPET"; then
        die "Failed to load nft rules"
    fi
fi

log "Transparent redirect active for subnet $SUBNET"
log "Dokodemo-door port: $PORT"
log "Snippet file: $NFT_SNIPPET"
